<?php

/**
 * @file
 * Update functions for the pw_globals module.
 */

/**
 * Implements hook_uninstall().
 */
function pw_globals_uninstall() {
  variable_del('pw_globals_antispam_api_key');
  variable_del('pw_globals_antispam_enabled');
  variable_get('pw_globals_antispam_exclude');
  variable_del('pw_globals_antispam_is_test');
}


/**
 * Disable obsolete modules.
 */
function pw_globals_update_7100() {
  $modules = [
    'jquery_dollar',
    'menu_import',
    'search_api_views',
    'site_verify',
    'views_xml_backend',
  ];
  module_disable($modules);
}

/**
 * Increase weight of pw_search_api.
 */
function pw_globals_update_7101() {
  db_update('system')
    ->fields(['weight' => 1])
    ->condition('name', 'pw_search_api')
    ->execute();
}

/**
 * Disable obsolete modules.
 */
function pw_globals_update_7102() {
  $modules = [
    'overlay_paths',
  ];
  module_disable($modules);
}

/**
 * Configure voting behavior block for polls.
 */
function pw_globals_update_7103() {
  $config = [
    'module' => 'pw_vote',
    'delta' => 'poll',
    'weight' => -80,
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'pages' => '',
    'cache' => DRUPAL_CACHE_PER_ROLE | DRUPAL_CACHE_PER_PAGE,
    'title' => '<none>',
    'regions' => ['parliamentwatch' => 'content'],
    'node_types' => ['poll']
  ];
  _pw_globals_configure_block($config);
}

/**
 * Enable Localization update.
 */
function pw_globals_update_7104() {
  module_enable(['l10n_update']);
  variable_set('l10n_update_import_mode', 2);
  variable_set('l10n_update_check_mode', 2);
}

/**
 * Disable obsolete modules.
 */
function pw_globals_update_7105() {
  $modules = [
    'customfilter',
    'search404',
  ];
  module_disable($modules);
}

/**
 * Reorganise main menu.
 */
function pw_globals_update_7106() {
  $links = menu_load_links('main-menu');
  $filter_parliament_links = function ($item) {
    $exclude = ['blog', 'info', 'user'];
    return $item['plid'] == 0 && !in_array($item['link_path'], $exclude);
  };
  $parliament_links = array_filter($links, $filter_parliament_links);

  foreach ($parliament_links as $link) {
    $plid = $link['mlid'];
    $filter = function ($item) use ($plid) {
      return $item['plid'] == $plid;
    };
    $children = array_filter($links, $filter);
    $mlid = _pw_globals_menu_link_add($link['link_path'], $link['link_title'], 0, 'main-menu', $link['mlid']);

    foreach ($children as $child) {
      $child['plid'] = $mlid;
      menu_link_save($child);
    }
  }

  variable_set('menu_block_3_level', 3);
}

/**
 * Delete income fields.
 */
function pw_globals_update_7107() {
  field_delete_field('field_sidejob_income_max');
  field_delete_field('field_sidejob_income_max_total');
  field_delete_field('field_sidejob_income_min');
  field_delete_field('field_sidejob_income_min_total');
}

/**
 * Enable sideline jobs block on profiles.
 */
function pw_globals_update_7108() {
  $config = [
    'module' => 'pw_sidejobs',
    'delta' => 'profile',
    'weight' => -72,
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => "profile/*",
    'cache' => DRUPAL_CACHE_PER_ROLE | DRUPAL_CACHE_PER_PAGE,
    'title' => '<none>',
    'regions' => ['parliamentwatch' => 'content_tabs']
  ];
  _pw_globals_configure_block($config);
}

/**
 * Configure testimonial block.
 */
function pw_globals_update_7109() {
  $config = [
    'module' => 'pw_globals',
    'delta' => 'testimonial',
    'weight' => -63,
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => 'taxonomy/term/*',
    'cache' => DRUPAL_CACHE_PER_ROLE | DRUPAL_CACHE_PER_PAGE,
    'title' => '<none>',
    'regions' => ['parliamentwatch' => 'content', 'blank' => 'content']
  ];
  _pw_globals_configure_block($config);
}

/**
 * Remove old testimonial block.
 */
function pw_globals_update_7110() {
  _pw_globals_delete_blocks([164]);
}

/**
 * Remove field_blogpost_categories from some content types.
 */
function pw_globals_update_7111() {
  foreach (['newsletter', 'poll', 'pw_petition'] as $bundle) {
    field_delete_instance(field_info_instance('node', 'field_blogpost_categories', $bundle));
  }
}

/**
 * Disable obsolete modules.
 */
function pw_globals_update_7112() {
  $modules = [
    'better_exposed_filters',
    'datatables',
    'editableviews',
    'field_delimiter',
    'hide_submit',
    'views_content_cache',
    'views_dynamic_fields',
    'views_field_view',
    'views_fieldsets',
    'views_load_more',
    'views_php',
    'views_sort_null_field',
  ];
  module_disable($modules);
}

/**
 * Replace custom filterbar block for voting behavior with dynamic one.
 */
function pw_globals_update_7113() {
  _pw_globals_delete_blocks([189]);
  $config = [
    'module' => 'pw_vote',
    'delta' => 'poll_filters',
    'weight' => -75,
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'pages' => 'eu/abstimmungen/*',
    'cache' => DRUPAL_NO_CACHE,
    'title' => '<none>',
    'regions' => ['parliamentwatch' => 'content'],
    'node_types' => ['poll']
  ];
  _pw_globals_configure_block($config);
}

/**
 * Configure new poll charts block.
 */
function pw_globals_update_7114() {
  $config = [
    'module' => 'pw_vote',
    'delta' => 'poll_charts',
    'weight' => -74,
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'pages' => 'eu/abstimmungen/*',
    'cache' => DRUPAL_CACHE_PER_ROLE | DRUPAL_CACHE_PER_PAGE,
    'title' => '<none>',
    'regions' => ['parliamentwatch' => 'content'],
    'node_types' => ['poll']
  ];
  _pw_globals_configure_block($config);
}

/**
 * Replace field_user_title with field_user_prefix.
 */
function pw_globals_update_7115() {
  $common_fields = [
    'entity_type',
    'bundle',
    'entity_id',
    'revision_id',
    'language',
    'delta',
  ];
  $source_fields = array_merge($common_fields, ['field_user_title_value']);
  $target_fields = array_merge($common_fields, ['field_user_prefix_value']);
  $allowed_values = array_values(field_info_field('field_user_prefix')['settings']['allowed_values']);
  db_insert('field_data_field_user_prefix')
    ->fields($target_fields)
    ->from(db_select('field_data_field_user_title', 't')->fields('t', $source_fields)->condition('field_user_title_value', $allowed_values))
    ->execute();
  db_insert('field_revision_field_user_prefix')
    ->fields($target_fields)
    ->from(db_select('field_revision_field_user_title', 't')->fields('t', $source_fields)->condition('field_user_title_value', $allowed_values))
    ->execute();
  field_delete_field('field_user_title');
}

/**
 * Copy data from field_user_picture_copyright to field_image_copyright.
 */
function pw_globals_update_7116() {
  $sql = 'INSERT INTO {field_data_field_image_copyright} '
    . 'SELECT :entity_type AS entity_type, :bundle AS bundle, fupc.deleted, '
    . 'fup.field_user_picture_fid AS entity_id, '
    . 'fup.field_user_picture_fid AS revision_id, fupc.language, fupc.delta, '
    . 'fupc.field_user_picture_copyright_value AS field_image_copyright_value, '
    . 'fupc.field_user_picture_copyright_format AS field_image_copyright_format '
    . 'FROM {field_data_field_user_picture fup} '
    . 'JOIN {field_data_field_user_picture_copyright} fupc USING(entity_id) '
    . 'ON DUPLICATE KEY UPDATE '
    . 'field_image_copyright_value = fupc.field_user_picture_copyright_value, '
    . 'field_image_copyright_format = fupc.field_user_picture_copyright_format';
  db_query($sql, [':entity_type' => 'file', ':bundle' => 'image']);
}

/**
 * Switch antispam detection to PW Globals.
 */
function pw_globals_update_7117() {
  variable_set('pw_globals_antispam_api_key', variable_get('antispam_wpapikey'));
  variable_set('pw_globals_antispam_exclude', ['comment_node_dialogue']);
  variable_set('antispam_connection_enabled', 0);
}

/**
 * Add terms to job categories.
 */
function pw_globals_update_7118() {
  $names = [
    'Funktionen in Unternehmen',
    'Funktionen in Körperschaften und Anstalten des öffentlichen Rechts',
    'Funktionen in Vereinen, Verbänden und Stiftungen',
    'Beteiligung an Kapital- oder Personengesellschaften',
    'Spenden/Zuwendungen für politische Tätigkeit',
    'Vereinbarungen über künftige Tätigkeiten oder Vermögensvorteile',
  ];

  foreach ($names as $weight => $name) {
    $term = new stdClass();
    $term->name = $name;
    $term->vid = taxonomy_vocabulary_machine_name_load('job_categories')->vid;
    $term->weight = $weight;
    taxonomy_term_save($term);
  }
}

/**
 * Add index to field_constituency_street.
 */
function pw_globals_update_7119() {
  db_add_index('field_data_field_constituency_street', 'value', ['field_constituency_street_value']);
}

/**
 * Remove field_blogpost_categories from some content types.
 */
function pw_globals_update_7120() {
  field_delete_field('field_parliament_constit_rename');
  field_delete_field('field_parliament_list_rename');
}

/**
 * Configure new election-teaser block.
 */
function pw_globals_update_7121() {
  $config = [
    'module' => 'pw_globals',
    'delta' => 'election_teaser',
    'weight' => -17,
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => '<front>',
    'cache' => DRUPAL_CACHE_PER_ROLE | DRUPAL_CACHE_PER_PAGE,
    'title' => '<none>',
    'regions' => ['parliamentwatch' => 'content']
  ];
  _pw_globals_configure_block($config);
}

/**
 * Adds a new menu block.
 *
 * @param array $block
 *   The basic block configuration.
 *
 * @param array $config
 *   The menu block configuration.
 */
function _pw_globals_add_menu_block($block, $config) {
  $block_ids = variable_get('menu_block_ids', array());
  $delta = empty($block_ids) ? 1 : max($block_ids) + 1;
  $block_ids[] = $delta;
  variable_set('menu_block_ids', $block_ids);
  $block['delta'] = $config['delta'] = $delta;
  $block['module'] = 'menu_block';
  menu_block_block_save($delta, $config);
  _pw_globals_configure_block($block);
}

/**
 * Configures a block.
 *
 * @param array $block
 *   The block configuration.
 */
function _pw_globals_configure_block($block) {
  $transaction = db_transaction();
  try {
    if (array_key_exists('regions', $block)) {
      foreach (system_list('theme') as $theme) {
        if ($theme->status) {
          $block['regions'] += [$theme->name => BLOCK_REGION_NONE];
        }
      }
      foreach ($block['regions'] as $theme => $region) {
        db_merge('block')
          ->key(['theme' => $theme, 'delta' => $block['delta'], 'module' => $block['module']])
          ->fields([
            'region' => ($region == BLOCK_REGION_NONE ? '' : $region),
            'visibility' => (int) $block['visibility'],
            'pages' => trim($block['pages']),
            'status' => (int) ($region != BLOCK_REGION_NONE),
            'weight' => $block['weight'],
            'cache' => $block['cache'],
          ])
          ->execute();
      }
    }

    if (array_key_exists('roles', $block)) {
      db_delete('block_role')
        ->condition('module', $block['module'])
        ->condition('delta', $block['delta'])
        ->execute();
      $query = db_insert('block_role')->fields(['rid', 'module', 'delta']);
      foreach (array_filter($block['roles']) as $rid) {
        $query->values([
          $rid,
          $block['module'],
          $block['delta'],
        ]);
      }
      $query->execute();
    }

    if (array_key_exists('node_types', $block)) {
      db_delete('block_node_type')
        ->condition('module', $block['module'])
        ->condition('delta', $block['delta'])
        ->execute();
      $query = db_insert('block_node_type')->fields(['module', 'delta', 'type']);
      foreach ($block['node_types'] as $type) {
        $query->values([
          $block['module'],
          $block['delta'],
          $type,
        ]);
        $query->execute();
      }
    }
  }
  catch (Exception $e) {
    $transaction->rollback();
    throw $e;
  }
}

/**
 * Deletes blocks.
 *
 * @param array $deltas
 *   The block IDs.
 */
function _pw_globals_delete_blocks($deltas) {
  db_delete('block_custom')
    ->condition('bid', $deltas, 'IN')
    ->execute();
  db_delete('block')
    ->condition('module', 'block')
    ->condition('delta', $deltas, 'IN')
    ->execute();
  db_delete('block_role')
    ->condition('module', 'block')
    ->condition('delta', $deltas, 'IN')
    ->execute();
}

/**
 * Adds a link to the main menu.
 *
 * @param string $path
 *   The link path.
 * @param string $title
 *   The link title.
 * @param int $weight
 *   The weight.
 * @param int $plid
 *   The (optional) parent item ID.
 *
 * @return int
 *   The mlid of the saved menu link, or FALSE if the menu link could not be
 *   saved.
 */
function _pw_globals_menu_link_add($path, $title, $weight, $menu_name, $plid = 0) {
  $item = [
    'link_path' => drupal_lookup_path('source', $path) ?: $path,
    'link_title' => $title,
    'menu_name' => $menu_name,
    'weight' => $weight,
    'expanded' => TRUE,
    'plid' => $plid,
  ];
  return menu_link_save($item);
}

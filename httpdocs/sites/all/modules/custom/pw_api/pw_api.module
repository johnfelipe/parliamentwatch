<?php
/**
 * @file
 */

include_once('pw_api.features.inc');

/**
 * Implements hook_menu().
 *
 * @return array
 */
function pw_api_menu() {
  $items = array();
  $items['admin/config/pw/pw_api/settings'] = array(
    'title' => 'PW API settings',
    'description' => 'Allows to add allowed IP addresses for the internal API.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pw_api_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'pw_api.admin.inc',
    );

  // add parliaments hooks
  foreach (array('xml', 'json') as $file_type) {
    $key = 'api/parliaments.'.$file_type;
    $item = array(
      'page callback' => 'pw_api_parliaments',
      'page arguments' => array($file_type),
      'access callback' => TRUE,
      'delivery callback' => 'pw_api_deliver_'.$file_type,
      'type' => MENU_CALLBACK,
      'file' => 'pw_api.parliaments.inc',
      );
    $items[$key] = $item;
  }

  // add constituency hooks
  foreach (array('xml', 'json') as $file_type) {
    $key = 'api/parliament/%/constituencies.'.$file_type;
    $item = array(
      'page callback' => 'pw_api_constituencies',
      'page arguments' => array(2, $file_type),
      'access callback' => TRUE,
      'delivery callback' => 'pw_api_deliver_'.$file_type,
      'type' => MENU_CALLBACK,
      'file' => 'pw_api.constituencies.inc',
      );
    $items[$key] = $item;
  }

  // add petitions / polls hooks
  foreach (array('xml', 'json') as $file_type) {

    // add petitions
    $key = 'api/parliament/%/petitions.'.$file_type;
    $item = array(
      'page callback' => 'pw_api_petitions',
      'page arguments' => array(2, $file_type),
      'access callback' => TRUE,
      'delivery callback' => 'pw_api_deliver_'.$file_type,
      'type' => MENU_CALLBACK,
      'file' => 'pw_api.votes.inc',
      );
    $items[$key] = $item;

    // add polls
    $key = 'api/parliament/%/polls.'.$file_type;
    $item['page callback'] = 'pw_api_polls';
    $items[$key] = $item;
  }

  // add poll hooks
  foreach (array('xml', 'json') as $file_type) {

    // add poll
    $key = 'api/parliament/%/poll/%/poll.'.$file_type;
    $item = array(
      'page callback' => 'pw_api_poll',
      'page arguments' => array(2, 4),
      'access callback' => TRUE,
      'delivery callback' => 'pw_api_deliver_'.$file_type,
      'type' => MENU_CALLBACK,
      'file' => 'pw_api.votes.inc',
      );
    $items[$key] = $item;
  }

  // add committees hooks
  foreach (array('xml', 'json') as $file_type) {

    // add committee
    $key = 'api/parliament/%/committees.'.$file_type;
    $item = array(
      'page callback' => 'pw_api_committees',
      'page arguments' => array(2),
      'access callback' => TRUE,
      'delivery callback' => 'pw_api_deliver_'.$file_type,
      'type' => MENU_CALLBACK,
      'file' => 'pw_api.committees.inc',
      );
    $items[$key] = $item;
  }

  // add committee hooks
  foreach (array('xml', 'json') as $file_type) {

    // add committee
    $key = 'api/parliament/%/committee/%/committee.'.$file_type;
    $item = array(
      'page callback' => 'pw_api_committee',
      'page arguments' => array(2, 4),
      'access callback' => TRUE,
      'delivery callback' => 'pw_api_deliver_'.$file_type,
      'type' => MENU_CALLBACK,
      'file' => 'pw_api.committees.inc',
      );
    $items[$key] = $item;
  }

  // add profile hooks
  foreach (array('xml', 'json') as $file_type) {
    $key = 'api/profile/%/profile.'.$file_type;
    $item = array(
      'page callback' => 'pw_api_profile',
      'page arguments' => array(2, $file_type),
      'access callback' => TRUE,
      'delivery callback' => 'pw_api_deliver_'.$file_type,
      'type' => MENU_CALLBACK,
      'file' => 'pw_api.profiles.inc',
      );
    $items[$key] = $item;

    // add another path for this call
    $key = 'api/parliament/%/profile/%/profile.'.$file_type;
    $item['page arguments'] = array(4, 2, $file_type);
    $items[$key] = $item;
  }

  // add profiles hooks
  foreach (array('xml', 'json') as $file_type) {
    $key = 'api/parliament/%/profiles.'.$file_type;
    $item = array(
      'page callback' => 'pw_api_profiles',
      'page arguments' => array(2, $file_type),
      'access callback' => TRUE,
      'delivery callback' => 'pw_api_deliver_'.$file_type,
      'type' => MENU_CALLBACK,
      'file' => 'pw_api.profiles.inc',
      );
    $items[$key] = $item;
    $items['api/parliament/%/deputies.'.$file_type] = $items[$key];
    $items['api/parliament/%/candidates.'.$file_type] = $items[$key];
  }

  // add topics hooks
  foreach (array('xml', 'json') as $file_type) {
    $key = 'api/topics.'.$file_type;
    $item = array(
      'page callback' => 'pw_api_topics',
      'access callback' => TRUE,
      'delivery callback' => 'pw_api_deliver_'.$file_type,
      'type' => MENU_CALLBACK,
      'file' => 'pw_api.topics.inc',
      );
    $items[$key] = $item;
  }

  return $items;
}


/**
 * Implements hook_menu().
 *
 * @return array
 */
function pw_api_permission() {
  return array(
    'access authorized api' => array(
      'title' => t('Access authorized API'),
      'description' => t('Read from hidden API to access private data.'),
      ),
    );
}


/**
 * Delivery callback; returns XML.
 *
 * @param array $items
 */
function pw_api_deliver_xml($page_result) {
  drupal_add_http_header('Content-type', 'text/xml; charset=utf8');

  if ($page_result === MENU_NOT_FOUND) {
    drupal_add_http_header('Status', '404 Not Found');
  }
  else {
    $writer = new XmlWriter();
    $writer->openUri('php://output');
    $writer->setIndent(TRUE);
    $writer->setIndentString('  ');
    $writer->startDocument('1.0', 'UTF-8');
    pw_api_items_to_xml($writer, $page_result);
    $writer->flush();
    drupal_add_http_header('Cache-Control', 'public, max-age=86400');
  }
}


/**
 * converts an array to xml via an referenced XmlWriter object.
 *
 * @param XmlWriter &$writer
 *
 * @param array $items
 */
function pw_api_items_to_xml(&$writer, $items) {
  foreach($items as $key => $value) {

    // clear node name from iterators
    $key = preg_replace('/_\d+$/', '', $key);

    if(is_array($value)) {
      $writer->startElement($key);
      pw_api_items_to_xml($writer, $value);
      $writer->endElement();
    }
    else {
      $writer->writeElement($key, $value);
    }
  }
}


/**
 * Rebuilds all associative arrays with keys like constituency_12345 to flat arrays.
 *
 * @param array $items
 */

function pw_api_json_array_rebuild(&$items){
  foreach ($items as $key => &$value) {
    if(is_array($value)){
      if(preg_match('/_\d+$/', key($value))){
        $items[$key] = array_values($value);
      }
      pw_api_json_array_rebuild($value);
    }
  }
}


/**
 * Shorten all names in json array.
 *
 * @param array $items
 */

function pw_api_shorten_names(&$items){
  $keys = array_keys($items);
  foreach ($keys as $key) {
    if (is_array($items[$key])) {
      pw_api_shorten_names($items[$key]);
    }
    if (!is_numeric($key)){
      for ($i = 2; !isset($newkey) || isset($items[$newkey]); $i++) {
        if (strlen($key) == $i) {
          break;
        }
        $newkey = substr(base64_encode(md5($key)), -1 -$i, $i);  # hash, base64, truncate
      }
      $items[$newkey] = $items[$key];
      unset($items[$key]);
    }
  }
}

/**
 * Delivery callback; returns JSON.
 *
 * @param array $page_result
 */

function pw_api_deliver_json($page_result) {
  drupal_add_http_header('Content-Type', 'application/json');

  if ($page_result === MENU_NOT_FOUND) {
    drupal_add_http_header('Status', '404 Not Found');
  }
  else {
    drupal_add_http_header('Cache-Control', 'public, max-age=86400');
    pw_api_json_array_rebuild($page_result);
    if(isset(drupal_get_query_parameters()['shorten']) && drupal_get_query_parameters()['shorten'] == '1'){
      pw_api_shorten_names($page_result);
      $page_result = array('full_document' => url(current_path(), array('absolute' => TRUE))) + $page_result;
    }
    print drupal_json_encode($page_result);
  }
}


/**
 * Builds urls to sub datasets.
 *
 * @param string $basepath
 *   api basepath
 * @param array $dataset_types
 *   e.g. deputies, constituencies
 * @param array $path_types
 *   usually uuid and name
 * @param array $path_types_parliaments
 *   for deeper paths e.g. single profiles. usually uuid and name.
 * @return array $datasets
 *   array with all urls to sub datasets
 */

function pw_api_urls_datasets($dataset_types, $path_types, $path_types_parliaments = []) {
  $basepath = 'api/parliament';
  $pathinfo = pathinfo(current_path());
  foreach ($dataset_types as $dataset_type) {
    foreach ($path_types as $path_type => $path_type_value) {
      if (!empty($path_types_parliaments)) {
        $path = $basepath.'/'.strtolower($path_types_parliaments[$path_type]).'/'.$dataset_type;
      }
      else {
        $path = $basepath;
      }
      $path .= '/'.$path_type_value.'/'.$dataset_type.'.'.$pathinfo['extension'];
      $datasets[$dataset_type]['by-'.$path_type] = url($path, ['absolute' => TRUE]);
    }
  }
  return $datasets;
}


/**
 * Sets meta data
 * @param array $dataset
 *   dataset
 * @param string $dataset_name
 *   name of the root element
 * @param string $contributer
 *   if exists: data contributer
 * @return array
 *   modified dataset
 */

function pw_api_meta_data($dataset, $dataset_name = FALSE, $subsets = [], $contributer = []) {
  for ($i=0; $i < sizeof($subsets); $i++) {
    $subsets['value_'.$i] = url(current_path(), ['absolute' => TRUE]).'?subsets='.$subsets[$i];
    unset($subsets[$i]);
  }
  for ($i=0; $i < sizeof($contributer); $i++) {
    $contributer['name_'.$i] = $contributer[$i];
    unset($contributer[$i]);
  }
  $pathinfo = pathinfo(current_path());
  if(!$dataset_name) {
    $dataset_name = $pathinfo['filename'];
  }
  if($pathinfo['extension'] == 'json'){
    return [
      'meta' => [
          'license' => [
            'name' => 'Open Database License (ODbL) v1.0',
            'url' => 'https://opendatacommons.org/licenses/odbl/1.0/'
          ],
          'contributer' => $contributer,
          'subsets' => $subsets,
        ],
        $dataset_name => $dataset
      ];
  }
  else{
    return [
      $dataset_name => [
        'meta' => [
          'license' => [
            'name' => 'Open Database License (ODbL) v1.0',
            'url' => 'https://opendatacommons.org/licenses/odbl/1.0/'
          ],
          'contributer' => $contributer,
          'subsets' => $subsets
        ]
      ] + $dataset];
  }
}

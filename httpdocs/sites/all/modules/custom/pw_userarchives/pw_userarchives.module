<?php

/**
 * @file
 * Includes main hooks.
 */

/**
 * Implements hook_entity_info_alter().
 */
function pw_userarchives_entity_info_alter(&$entity_info) {
  $entity_info['user']['controller class'] = 'UserArchiveController';
}

/**
 * Implements hook_user_insert().
 */
function pw_userarchives_user_insert(&$edit, $account, $category) {
  $reset_actual_profile = !isset($_REQUEST['form_id']);
  pw_userarchives_cron($account->uid, $reset_actual_profile);
}

/**
 * Implements hook_user_update().
 */
function pw_userarchives_user_update(&$edit, $account, $category) {
  $reset_actual_profile = !isset($_REQUEST['form_id']);
  pw_userarchives_cron($account->uid, $reset_actual_profile);
}

/**
 * Implements hook_cron().
 *
 * Updates stats for users.
 *
 * 1. Fetch highest and actual vid of every grouped item.
 * 2. Modify query object and re-fetch data using the vids.
 * 3. Do the delete and update queries
 * 4. Update fields, index, etc.
 */
function pw_userarchives_cron($uid = NULL, $reset_actual_profile = TRUE) {
  $tracked_items_query = db_select('user_archive_cache', 'uac');
  $tracked_items_query->addExpression('MAX(uac.vid)');
  $tracked_items_query->groupBy('uac.uid, uac.parliament_name, uac.user_role');

  $transaction = db_transaction();

  try {
    // check if election date or parliaments end date is reached, then delete profiles from meta table for triggering refresh
    if ($uid == NULL) {
      $tracked_items = [];
      $vocabulary = taxonomy_vocabulary_machine_name_load('parliaments');
      $parliaments = entity_load('taxonomy_term', FALSE, array('vid' => $vocabulary->vid));
      foreach ($parliaments as $parliament) {
        if (pw_userarchives_check_refresh_profiles($parliament)) {
          $tracked_items = array_merge($tracked_items, $tracked_items_query
            ->condition('parliament_name', $parliament->name)
            ->execute()
            ->fetchCol());
          db_delete('user_archive_cache')
            ->condition('parliament_name', $parliament->name)
            ->execute();
        }
      }
    } else {
      $tracked_items = $tracked_items_query
        ->condition('uid', $uid)
        ->execute()
        ->fetchCol();
      // empty cache if uid is specified
      db_delete('user_archive_cache')
        ->condition('uid', $uid)
        ->execute();
    }

    // db_select: user revision
    $query = db_select('user_revision', 'ur');
    $query->addExpression('MAX(ur.vid)', 'vid');

    // join taxonomy terms for parliament names
    $query->join('field_revision_field_user_parliament', 'u_parl', "u_parl.entity_type = 'user' AND ur.vid = u_parl.revision_id");
    $query->join('taxonomy_term_data', 'parliament', 'parliament.tid = u_parl.field_user_parliament_tid');

    // join fractions for fraction tids
    $query->leftJoin('field_revision_field_user_fraction', 'fraction_tid', "fraction_tid.entity_type = 'user' AND fraction_tid.revision_id = ur.vid");
    $query->leftJoin('taxonomy_term_data', 'fraction', 'fraction.tid = fraction_tid.field_user_fraction_tid');

    // join revisionable roles for user_roles
    $query->join('field_revision_field_user_roles_for_view_mode_s', 'role_tid', "role_tid.entity_type = 'user' AND role_tid.revision_id = ur.vid");
    $query->join('taxonomy_term_data', 'role', 'role.tid = role_tid.field_user_roles_for_view_mode_s_tid');

    // query conditions
    $query->condition('ur.status', '1');
    if ($uid != NULL) {
      $query->condition('ur.uid', $uid);
    }
    $query->condition('role.name', array('Deputy', 'Candidate'));
    $query->groupBy('ur.uid, u_parl.field_user_parliament_tid, role_tid.field_user_roles_for_view_mode_s_tid, fraction_tid.field_user_fraction_tid');

    // fetch all relevant vids as flat array
    $vids = $query->execute()->fetchCol();

    if (empty($vids)) {
      return;
    }

    /*
     * second step: modify query and get items by its vids
     */

    // set vids as condition
    $query->condition('ur.vid', $vids);

    // unset group and max(vid) expression
    array_pop($query->getGroupBy());
    array_pop($query->getExpressions());

    // readd vid as regular field
    $query->addField('ur', 'vid', 'vid');

    // add all the other fields (and joins)
    $query->addField('ur', 'uid'); // NOTE: keep as index 1 for fetchCol
    $query->addField('ur', 'name', 'user_name');
    $query->addField('parliament', 'name', 'parliament_name');
    $query->addField('fraction', 'name', 'fraction_name');
    $query->addExpression('LOWER(role.name)', 'user_role');

    // join parliament election to get timestamp for elections
    $query->leftJoin('field_revision_field_parliament_election', 'pe', "pe.entity_type='taxonomy_term' AND pe.entity_id = u_parl.field_user_parliament_tid");
    $query->addExpression('UNIX_TIMESTAMP(pe.field_parliament_election_value)', 'timestamp');

    // join parliament valid AND question form closed to check if the profile is open for questions or not
    $query->leftJoin('field_revision_field_parliament_valid', 'pv', "pv.entity_type='taxonomy_term' AND pv.entity_id = u_parl.field_user_parliament_tid AND pv.field_parliament_valid_value < NOW() AND (pv.field_parliament_valid_value2 IS NULL OR pv.field_parliament_valid_value2 > NOW())");
    $query->leftJoin('field_revision_field_user_question_form_closed', 'qf_closed', "qf_closed.entity_type='user' AND qf_closed.revision_id = ur.vid");
    $query->addExpression("
      COUNT(pv.field_parliament_valid_value) > 0 AND
      (user_joined.field_user_joined_value IS NULL OR user_joined.field_user_joined_value < NOW()) AND
      (user_retired.field_user_retired_value IS NULL OR user_retired.field_user_retired_value > NOW()) AND
      (role.name = 'deputy' AND pe.field_parliament_election_value < NOW() OR role.name = 'candidate' AND pe.field_parliament_election_value > NOW()) AND
      qf_closed.field_user_question_form_closed_value IS NULL", 'question_form_open');

    // join joined to get valid from
    $query->leftJoin('field_revision_field_user_joined', 'user_joined', "user_joined.entity_type = 'user' AND user_joined.revision_id = ur.vid");
    $query->addField('user_joined', 'field_user_joined_value', 'user_joined');

    // join retired to get valid until
    $query->leftJoin('field_revision_field_user_retired', 'user_retired', "user_retired.entity_type = 'user' AND user_retired.revision_id = ur.vid");
    $query->addField('user_retired', 'field_user_retired_value', 'user_retired');

    // join dialogues fields to get number of questions
    $query->leftJoin("field_data_field_dialogue_recipient", "dia_rp", "dia_rp.entity_type = 'node' AND dia_rp.field_dialogue_recipient_target_id = ur.uid");
    $query->leftJoin("field_data_field_parliament", "dia_parl", "dia_parl.entity_type = 'node' AND dia_parl.entity_id = dia_rp.entity_id AND dia_parl.field_parliament_tid = parliament.tid");
    $query->leftJoin("field_data_field_dialogue_before_election", "dia_election", "dia_election.entity_type = 'node' AND dia_election.entity_id = dia_parl.entity_id AND
          CASE
          WHEN role.name = 'Candidate' THEN dia_election.field_dialogue_before_election_value = 1
          ELSE dia_election.field_dialogue_before_election_value = 0
          END");
    $query->leftJoin("node", "n", "dia_rp.entity_id = n.nid AND n.status = 1");
    $query->addExpression("IFNULL(COUNT(DISTINCT dia_election.entity_id), 0)", "number_of_questions");

    // join comments to dialogues to get number of answers without standard replies
    $query->leftJoin("comment", "c", "dia_election.entity_id = c.nid AND c.status = 1");
    $query->leftJoin("field_data_field_dialogue_is_standard_reply", "standard_reply", "standard_reply.entity_type = 'comment' AND standard_reply.entity_id = c.cid");
    $query->addExpression("IFNULL(COUNT(DISTINCT c.nid), 0) - IFNULL(SUM(standard_reply.field_dialogue_is_standard_reply_value), 0)", "number_of_answers");

    // get number of standard replies
    $query->addExpression("IFNULL(SUM(standard_reply.field_dialogue_is_standard_reply_value), 0)", "number_of_standard_replies");

    // join users to get actual profile
    $query->leftJoin("users", "u", "ur.vid = u.vid");
    $query->groupBy('ur.vid');
    $query->addExpression("NOT ISNULL(u.vid)", "actual_profile");

    // join user archive cache for comparing
    $query->leftJoin('user_archive_cache', 'uac', "ur.vid = uac.vid");

    // need fields for comparison in having clause
    $query->addField("uac", "number_of_questions", "uac_number_of_questions");
    $query->addField("uac", "number_of_answers", "uac_number_of_answers");
    $query->addField("uac", "number_of_standard_replies", "uac_number_of_standard_replies");

    $query->having('(ISNULL(uac.number_of_questions)
          OR uac_number_of_questions != number_of_questions
          OR uac_number_of_answers != number_of_answers
          OR uac_number_of_standard_replies != number_of_standard_replies)');

    // nothing to update
    if (empty($query) || $query->execute()->rowCount() == 0) {
      return;
    }

    // fetch vids and uids
    $result = $query->execute()->fetchAllAssoc('vid', PDO::FETCH_ASSOC);
    $uids = array_unique(array_column($result, 'uid'));

    // delete and insert archive cache
    $fields = array_merge(array_keys($query->getFields()), array_keys($query->getExpressions()));
    unset($fields[array_search('uac_number_of_questions', $fields)]);
    unset($fields[array_search('uac_number_of_answers', $fields)]);
    unset($fields[array_search('uac_number_of_standard_replies', $fields)]);
    sort($fields);

    foreach ($result as $row) {
      db_delete('user_archive_cache')
        ->condition('parliament_name', $row['parliament_name'])
        ->condition('user_role', $row['user_role'])
        ->condition('uid', $row['uid'])
        ->condition('fraction_name', $row['fraction_name'])
        ->execute();

      unset($row['uac_number_of_questions']);
      unset($row['uac_number_of_answers']);
      unset($row['uac_number_of_standard_replies']);
      ksort($row);

      db_insert('user_archive_cache')
        ->fields($fields)
        ->values($row)
        ->execute();
    }

    // set actual / newest profile
    if ($reset_actual_profile) {
      foreach ($uids as $uid) {
        // restore to newest profile, especially after importing older profiles
        pw_reset_actuale_profile($uid);
      }
    }

    // delete file entries with fid=0 because it will break field_attach_update
    db_delete('file_usage')
      ->condition('fid', 0)
      ->condition('type', 'user')
      ->condition('id', $uids)
      ->execute();
    db_delete('field_data_field_user_image_gallery')
      ->condition('field_user_image_gallery_fid', 0)
      ->condition('entity_type', 'user')
      ->condition('entity_id', $uids)
      ->execute();
    db_delete('field_revision_field_user_image_gallery')
      ->condition('field_user_image_gallery_fid', 0)
      ->condition('entity_type', 'user')
      ->condition('entity_id', $uids)
      ->execute();

    // update fields
    foreach ($result as $row) {

      // load revision
      $user_revision = user_revision_load($row['uid'], $row['vid']);
      if ($user_revision) {
        $revision_edit = array();

        // reset pictures which have a null value
        if (key_exists('und', $user_revision->field_user_picture) && $user_revision->field_user_picture['und'][0] === NULL) {
          $revision_edit['field_user_picture'] = array();
          _pw_send_debug_mail('field_user_picture is NULL', $user_revision);
        }
        // _user_revision_edit_save($user_revision, $revision_edit);
      }
    }

    $politician_index = search_api_index_load('politician_archive_index');
    $items_to_track_after_update = $tracked_items_query
      ->condition('uac.vid', $vids)
      ->execute()
      ->fetchCol();

    if ($politician_index) {
      try{
        search_api_track_item_insert('user_revision', array_diff($items_to_track_after_update, $tracked_items));
      }
      catch (Exception $e) {
      }
      search_api_track_item_delete('user_revision', array_diff($tracked_items, $items_to_track_after_update));
    }
  }
  catch (Exception $e) {
    $transaction->rollback();
    throw $e;
  }
}

/**
 * Implements hook_search_api_item_type_info().
 */
function pw_userarchives_search_api_item_type_info() {
  $types['user_revision'] = [
    'name' => t('User revision'),
    'datasource controller' => 'UserArchiveDataSourceController',
    'entity_type' => 'user',
  ];
  return $types;
}

/**
 * Implements hook_search_api_alter_callback_info().
 */
function pw_userarchives_search_api_alter_callback_info() {
  $callbacks['user_archive_alter'] = [
    'name' => t('User archive fields'),
    'description' => t('Adds user archive fields to the items.'),
    'class' => 'UserArchiveAlterAddFields',
    'weight' => 100,
  ];
  return $callbacks;
}

/**
 * Returns requested versions of user objects with all fields attached.
 *
 * @param  $vids
 *   The revision IDs.
 *
 * @return array
 *   The fully loaded user objects having the given revision IDs.
 */
function pw_userarchives_politician_load_multiple($vids) {
  if (empty($vids)) {
    return [];
  }

  $q = db_select('user_revision', 'ur');
  $q->join('users', 'u', 'u.uid = ur.uid');
  $q->leftJoin('user_archive_cache', 'uac', 'ur.vid = uac.vid');
  $q->fields('ur')
    ->fields('u', ['created', 'uuid'])
    ->fields('uac', ['actual_profile', 'number_of_questions', 'number_of_answers', 'user_role'])
    ->condition('ur.vid', $vids);
  $q->addField('ur', 'timestamp', 'revision_timestamp');
  $q->addField('ur', 'authorid', 'revision_uid');

  $sorted_users = array_flip($vids);

  foreach($q->execute()->fetchAllAssoc('uid') as $uid => $properties) {
    $users[$uid] = $properties;
    $users[$uid]->data = unserialize($properties->data);
    $users[$uid]->roles[DRUPAL_AUTHENTICATED_RID] = 'authenticated user';
    $users[$uid]->roles[PW_GLOBALS_POLITICIAN_RID] = 'Politician';
    if ($properties->user_role == 'candidate') {
      $users[$uid]->roles[PW_GLOBALS_CANDIDATE_RID] = 'Candidate';
    }
    elseif ($properties->user_role == 'deputy') {
      $users[$uid]->roles[PW_GLOBALS_DEPUTY_RID] = 'Deputy';
    }
    unset($users[$uid]->user_role);

    $sorted_users[$properties->vid] = $users[$uid];
  }

  field_attach_load_revision('user', $users);

  return array_filter($sorted_users, 'is_object');
}

/**
 * check if profiles needs to be refreshed based on parliament valid dates and election date.
 */
function pw_userarchives_check_refresh_profiles($parliament) {

  $do_refresh_profiles = FALSE;
  $timespan_close_before_election = 6 * 3600;

  // first check if election date was reached
  $field_parliament_election = field_get_items('taxonomy_term', $parliament, 'field_parliament_election');
  if ($field_parliament_election) {
    $time_diff = time() - (strtotime($field_parliament_election[0]['value']) - $timespan_close_before_election);
    $do_refresh_profiles = $time_diff <= 6000 && $time_diff > 0;
  }
  if (!$do_refresh_profiles) {

    // secondly check if valid end dates were reached
    $field_parliament_valid = field_get_items('taxonomy_term', $parliament, 'field_parliament_valid');
    if ($field_parliament_valid) {
      foreach ($field_parliament_valid as $valid_date) {
        if (!empty($valid_date['value2'])) {
          $time_diff = time() - strtotime($valid_date['value2']);
          $do_refresh_profiles = $time_diff <= 6000 && $time_diff > 0;
          if ($do_refresh_profiles) {
            break;
          }
        }
      }
    }
  }
  return $do_refresh_profiles;
}

/**
 * Deletes old user revisions from database.
 */
function pw_delete_old_user_revisions($uid = NULL) {
  $days_buffer = 0;
  $time_buffer = time() - (86400 * $days_buffer);

  // query for all revision which are older than X days and which are not in the user_archive_cache table
  $query = db_select('user_revision', 'ur');
  $query->addField('ur', 'uid');
  $query->addField('ur', 'vid');
  $query->addField('uac', 'id');
  $query->join('field_revision_field_user_roles_for_view_mode_s', 'ro', 'ro.entity_id=ur.uid AND ro.revision_id=ur.vid');
  $query->join('taxonomy_term_data', 'rn', 'rn.tid=ro.field_user_roles_for_view_mode_s_tid');
  $query->leftJoin('user_archive_cache', 'uac', 'ur.uid = uac.uid AND ur.vid = uac.vid');
  $query->join('users', 'u', 'ur.uid = u.uid AND ur.vid != u.vid');
  if ($uid !== NULL) {
    $query->condition('ur.uid', $uid);
  }
  $query->condition('ur.timestamp', $time_buffer, '<');
  $query->condition('rn.name', 'Politician');
  $query->isNull('id');
  $result = $query->execute();
  $number_of_revisions = $result->rowCount();

  // revisions found
  if ($number_of_revisions > 0) {

    // delete all those revisions
    while ($revision = $result->fetchObject()) {
      user_revision_delete($revision);
    }

    // leave a message
    watchdog('pw_userarchives', ':number_of_revisions user revisions deleted which were older than :days_buffer days and were not associated with user_archive_cache', array(
      ':number_of_revisions' => $number_of_revisions,
      ':days_buffer' => $days_buffer
    ));
  }
}

/**
 * Chaecks and resets user revision to actual (newest) profile
 * @param $uid
 */
function pw_reset_actuale_profile($uid, $exclude_vids=array()) {

  // load current profile
  $user = user_load($uid, TRUE);

  if (!$user) {
    return;
  }

  // load newest profile which is open for questions
  $query = db_select('user_archive_cache', 'uac');
  $query->addField('uac', 'vid');
  $query->condition('uac.uid', $uid);
  if(!empty($exclude_vids)){
    $query->condition('uac.vid', $exclude_vids, 'NOT IN');
  }
  $query->orderBy('uac.question_form_open', 'DESC');
  $query->orderBy('uac.timestamp', 'DESC');
  $query->orderBy('uac.user_role=\'deputy\'', 'DESC');
  $query->orderBy('uac.vid', 'DESC');
  $result = $query->execute()->fetchAssoc();
  $newest_vid = $result['vid'];

  // check if current vid is newest
  if ($user->vid != $newest_vid) {

    // load full revision
    $user_revision = user_revision_load($uid, $newest_vid);

    // retrieve roles and add them to user object
    $role_tids = _pw_array_flatten($user_revision->field_user_roles_for_view_mode_s, FALSE);
    $roles_terms = taxonomy_term_load_multiple($role_tids);
    $user_revision->roles = [];
    foreach ($roles_terms as $role_term) {
      $role = user_role_load_by_name($role_term->name);
      $user_revision->roles[$role->rid] = $role->name;
    }
    $user_revision->revision = 1;

    // add custom abort flag to prevent from circular updates
    $user_revision->abort_update = 1;
    $user_revision->log = t('Copy of the revision from %date.', array('%date' => format_date($user_revision->revision_timestamp)));
    user_save($user_revision, (array) $user_revision);
    watchdog('user', 'reverted %title revision %revision.', array('%title' => $user_revision->name, '%revision' => $user_revision->vid));

    // recorrect user archive cache
    db_delete('user_archive_cache')
      ->condition('uid', $uid)
      ->execute();
    pw_userarchives_cron($uid, FALSE);
  }
}
